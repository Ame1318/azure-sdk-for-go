// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import "encoding/json"

func unmarshalWorkloadNetworkDhcpEntityClassification(rawMsg *json.RawMessage) (WorkloadNetworkDhcpEntityClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(*rawMsg, &m); err != nil {
		return nil, err
	}
	var b WorkloadNetworkDhcpEntityClassification
	switch m["dhcpType"] {
	case "RELAY":
		b = &WorkloadNetworkDhcpRelay{}
	case "SERVER":
		b = &WorkloadNetworkDhcpServer{}
	default:
		b = &WorkloadNetworkDhcpEntity{}
	}
	return b, json.Unmarshal(*rawMsg, b)
}

func unmarshalWorkloadNetworkDhcpEntityClassificationArray(rawMsg *json.RawMessage) (*[]WorkloadNetworkDhcpEntityClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []*json.RawMessage
	if err := json.Unmarshal(*rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]WorkloadNetworkDhcpEntityClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalWorkloadNetworkDhcpEntityClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return &fArray, nil
}

func strptr(s string) *string {
	return &s
}
