// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// ClusterListPager provides iteration over ClusterList pages.
type ClusterListPager interface {
	azcore.Pager

	// Page returns the current ClusterListResponse.
	PageResponse() ClusterListResponse
}

type clusterListCreateRequest func(context.Context) (*azcore.Request, error)

type clusterListHandleError func(*azcore.Response) error

type clusterListHandleResponse func(*azcore.Response) (ClusterListResponse, error)

type clusterListAdvancePage func(context.Context, ClusterListResponse) (*azcore.Request, error)

type clusterListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester clusterListCreateRequest
	// callback for handling response errors
	errorer clusterListHandleError
	// callback for handling the HTTP response
	responder clusterListHandleResponse
	// callback for advancing to the next page
	advancer clusterListAdvancePage
	// contains the current response
	current ClusterListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *clusterListPager) Err() error {
	return p.err
}

func (p *clusterListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterList.NextLink == nil || len(*p.current.ClusterList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *clusterListPager) PageResponse() ClusterListResponse {
	return p.current
}

// ExpressRouteAuthorizationListPager provides iteration over ExpressRouteAuthorizationList pages.
type ExpressRouteAuthorizationListPager interface {
	azcore.Pager

	// Page returns the current ExpressRouteAuthorizationListResponse.
	PageResponse() ExpressRouteAuthorizationListResponse
}

type expressRouteAuthorizationListCreateRequest func(context.Context) (*azcore.Request, error)

type expressRouteAuthorizationListHandleError func(*azcore.Response) error

type expressRouteAuthorizationListHandleResponse func(*azcore.Response) (ExpressRouteAuthorizationListResponse, error)

type expressRouteAuthorizationListAdvancePage func(context.Context, ExpressRouteAuthorizationListResponse) (*azcore.Request, error)

type expressRouteAuthorizationListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester expressRouteAuthorizationListCreateRequest
	// callback for handling response errors
	errorer expressRouteAuthorizationListHandleError
	// callback for handling the HTTP response
	responder expressRouteAuthorizationListHandleResponse
	// callback for advancing to the next page
	advancer expressRouteAuthorizationListAdvancePage
	// contains the current response
	current ExpressRouteAuthorizationListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *expressRouteAuthorizationListPager) Err() error {
	return p.err
}

func (p *expressRouteAuthorizationListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteAuthorizationList.NextLink == nil || len(*p.current.ExpressRouteAuthorizationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteAuthorizationListPager) PageResponse() ExpressRouteAuthorizationListResponse {
	return p.current
}

// GlobalReachConnectionListPager provides iteration over GlobalReachConnectionList pages.
type GlobalReachConnectionListPager interface {
	azcore.Pager

	// Page returns the current GlobalReachConnectionListResponse.
	PageResponse() GlobalReachConnectionListResponse
}

type globalReachConnectionListCreateRequest func(context.Context) (*azcore.Request, error)

type globalReachConnectionListHandleError func(*azcore.Response) error

type globalReachConnectionListHandleResponse func(*azcore.Response) (GlobalReachConnectionListResponse, error)

type globalReachConnectionListAdvancePage func(context.Context, GlobalReachConnectionListResponse) (*azcore.Request, error)

type globalReachConnectionListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester globalReachConnectionListCreateRequest
	// callback for handling response errors
	errorer globalReachConnectionListHandleError
	// callback for handling the HTTP response
	responder globalReachConnectionListHandleResponse
	// callback for advancing to the next page
	advancer globalReachConnectionListAdvancePage
	// contains the current response
	current GlobalReachConnectionListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *globalReachConnectionListPager) Err() error {
	return p.err
}

func (p *globalReachConnectionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GlobalReachConnectionList.NextLink == nil || len(*p.current.GlobalReachConnectionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *globalReachConnectionListPager) PageResponse() GlobalReachConnectionListResponse {
	return p.current
}

// HcxEnterpriseSiteListPager provides iteration over HcxEnterpriseSiteList pages.
type HcxEnterpriseSiteListPager interface {
	azcore.Pager

	// Page returns the current HcxEnterpriseSiteListResponse.
	PageResponse() HcxEnterpriseSiteListResponse
}

type hcxEnterpriseSiteListCreateRequest func(context.Context) (*azcore.Request, error)

type hcxEnterpriseSiteListHandleError func(*azcore.Response) error

type hcxEnterpriseSiteListHandleResponse func(*azcore.Response) (HcxEnterpriseSiteListResponse, error)

type hcxEnterpriseSiteListAdvancePage func(context.Context, HcxEnterpriseSiteListResponse) (*azcore.Request, error)

type hcxEnterpriseSiteListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester hcxEnterpriseSiteListCreateRequest
	// callback for handling response errors
	errorer hcxEnterpriseSiteListHandleError
	// callback for handling the HTTP response
	responder hcxEnterpriseSiteListHandleResponse
	// callback for advancing to the next page
	advancer hcxEnterpriseSiteListAdvancePage
	// contains the current response
	current HcxEnterpriseSiteListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *hcxEnterpriseSiteListPager) Err() error {
	return p.err
}

func (p *hcxEnterpriseSiteListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HcxEnterpriseSiteList.NextLink == nil || len(*p.current.HcxEnterpriseSiteList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *hcxEnterpriseSiteListPager) PageResponse() HcxEnterpriseSiteListResponse {
	return p.current
}

// OperationListPager provides iteration over OperationList pages.
type OperationListPager interface {
	azcore.Pager

	// Page returns the current OperationListResponse.
	PageResponse() OperationListResponse
}

type operationListCreateRequest func(context.Context) (*azcore.Request, error)

type operationListHandleError func(*azcore.Response) error

type operationListHandleResponse func(*azcore.Response) (OperationListResponse, error)

type operationListAdvancePage func(context.Context, OperationListResponse) (*azcore.Request, error)

type operationListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListCreateRequest
	// callback for handling response errors
	errorer operationListHandleError
	// callback for handling the HTTP response
	responder operationListHandleResponse
	// callback for advancing to the next page
	advancer operationListAdvancePage
	// contains the current response
	current OperationListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListPager) Err() error {
	return p.err
}

func (p *operationListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListPager) PageResponse() OperationListResponse {
	return p.current
}

// PrivateCloudListPager provides iteration over PrivateCloudList pages.
type PrivateCloudListPager interface {
	azcore.Pager

	// Page returns the current PrivateCloudListResponse.
	PageResponse() PrivateCloudListResponse
}

type privateCloudListCreateRequest func(context.Context) (*azcore.Request, error)

type privateCloudListHandleError func(*azcore.Response) error

type privateCloudListHandleResponse func(*azcore.Response) (PrivateCloudListResponse, error)

type privateCloudListAdvancePage func(context.Context, PrivateCloudListResponse) (*azcore.Request, error)

type privateCloudListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateCloudListCreateRequest
	// callback for handling response errors
	errorer privateCloudListHandleError
	// callback for handling the HTTP response
	responder privateCloudListHandleResponse
	// callback for advancing to the next page
	advancer privateCloudListAdvancePage
	// contains the current response
	current PrivateCloudListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateCloudListPager) Err() error {
	return p.err
}

func (p *privateCloudListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateCloudList.NextLink == nil || len(*p.current.PrivateCloudList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateCloudListPager) PageResponse() PrivateCloudListResponse {
	return p.current
}

// WorkloadNetworkDhcpListPager provides iteration over WorkloadNetworkDhcpList pages.
type WorkloadNetworkDhcpListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkDhcpListResponse.
	PageResponse() WorkloadNetworkDhcpListResponse
}

type workloadNetworkDhcpListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkDhcpListHandleError func(*azcore.Response) error

type workloadNetworkDhcpListHandleResponse func(*azcore.Response) (WorkloadNetworkDhcpListResponse, error)

type workloadNetworkDhcpListAdvancePage func(context.Context, WorkloadNetworkDhcpListResponse) (*azcore.Request, error)

type workloadNetworkDhcpListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkDhcpListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkDhcpListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkDhcpListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkDhcpListAdvancePage
	// contains the current response
	current WorkloadNetworkDhcpListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkDhcpListPager) Err() error {
	return p.err
}

func (p *workloadNetworkDhcpListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkDhcpList.NextLink == nil || len(*p.current.WorkloadNetworkDhcpList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkDhcpListPager) PageResponse() WorkloadNetworkDhcpListResponse {
	return p.current
}

// WorkloadNetworkGatewayListPager provides iteration over WorkloadNetworkGatewayList pages.
type WorkloadNetworkGatewayListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkGatewayListResponse.
	PageResponse() WorkloadNetworkGatewayListResponse
}

type workloadNetworkGatewayListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkGatewayListHandleError func(*azcore.Response) error

type workloadNetworkGatewayListHandleResponse func(*azcore.Response) (WorkloadNetworkGatewayListResponse, error)

type workloadNetworkGatewayListAdvancePage func(context.Context, WorkloadNetworkGatewayListResponse) (*azcore.Request, error)

type workloadNetworkGatewayListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkGatewayListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkGatewayListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkGatewayListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkGatewayListAdvancePage
	// contains the current response
	current WorkloadNetworkGatewayListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkGatewayListPager) Err() error {
	return p.err
}

func (p *workloadNetworkGatewayListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkGatewayList.NextLink == nil || len(*p.current.WorkloadNetworkGatewayList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkGatewayListPager) PageResponse() WorkloadNetworkGatewayListResponse {
	return p.current
}

// WorkloadNetworkPortMirroringListPager provides iteration over WorkloadNetworkPortMirroringList pages.
type WorkloadNetworkPortMirroringListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkPortMirroringListResponse.
	PageResponse() WorkloadNetworkPortMirroringListResponse
}

type workloadNetworkPortMirroringListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkPortMirroringListHandleError func(*azcore.Response) error

type workloadNetworkPortMirroringListHandleResponse func(*azcore.Response) (WorkloadNetworkPortMirroringListResponse, error)

type workloadNetworkPortMirroringListAdvancePage func(context.Context, WorkloadNetworkPortMirroringListResponse) (*azcore.Request, error)

type workloadNetworkPortMirroringListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkPortMirroringListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkPortMirroringListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkPortMirroringListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkPortMirroringListAdvancePage
	// contains the current response
	current WorkloadNetworkPortMirroringListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkPortMirroringListPager) Err() error {
	return p.err
}

func (p *workloadNetworkPortMirroringListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkPortMirroringList.NextLink == nil || len(*p.current.WorkloadNetworkPortMirroringList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkPortMirroringListPager) PageResponse() WorkloadNetworkPortMirroringListResponse {
	return p.current
}

// WorkloadNetworkSegmentsListPager provides iteration over WorkloadNetworkSegmentsList pages.
type WorkloadNetworkSegmentsListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkSegmentsListResponse.
	PageResponse() WorkloadNetworkSegmentsListResponse
}

type workloadNetworkSegmentsListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkSegmentsListHandleError func(*azcore.Response) error

type workloadNetworkSegmentsListHandleResponse func(*azcore.Response) (WorkloadNetworkSegmentsListResponse, error)

type workloadNetworkSegmentsListAdvancePage func(context.Context, WorkloadNetworkSegmentsListResponse) (*azcore.Request, error)

type workloadNetworkSegmentsListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkSegmentsListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkSegmentsListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkSegmentsListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkSegmentsListAdvancePage
	// contains the current response
	current WorkloadNetworkSegmentsListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkSegmentsListPager) Err() error {
	return p.err
}

func (p *workloadNetworkSegmentsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkSegmentsList.NextLink == nil || len(*p.current.WorkloadNetworkSegmentsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkSegmentsListPager) PageResponse() WorkloadNetworkSegmentsListResponse {
	return p.current
}

// WorkloadNetworkVMGroupsListPager provides iteration over WorkloadNetworkVMGroupsList pages.
type WorkloadNetworkVMGroupsListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkVMGroupsListResponse.
	PageResponse() WorkloadNetworkVMGroupsListResponse
}

type workloadNetworkVMGroupsListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkVMGroupsListHandleError func(*azcore.Response) error

type workloadNetworkVMGroupsListHandleResponse func(*azcore.Response) (WorkloadNetworkVMGroupsListResponse, error)

type workloadNetworkVMGroupsListAdvancePage func(context.Context, WorkloadNetworkVMGroupsListResponse) (*azcore.Request, error)

type workloadNetworkVMGroupsListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkVMGroupsListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkVMGroupsListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkVMGroupsListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkVMGroupsListAdvancePage
	// contains the current response
	current WorkloadNetworkVMGroupsListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkVMGroupsListPager) Err() error {
	return p.err
}

func (p *workloadNetworkVMGroupsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkVMGroupsList.NextLink == nil || len(*p.current.WorkloadNetworkVMGroupsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkVMGroupsListPager) PageResponse() WorkloadNetworkVMGroupsListResponse {
	return p.current
}

// WorkloadNetworkVirtualMachinesListPager provides iteration over WorkloadNetworkVirtualMachinesList pages.
type WorkloadNetworkVirtualMachinesListPager interface {
	azcore.Pager

	// Page returns the current WorkloadNetworkVirtualMachinesListResponse.
	PageResponse() WorkloadNetworkVirtualMachinesListResponse
}

type workloadNetworkVirtualMachinesListCreateRequest func(context.Context) (*azcore.Request, error)

type workloadNetworkVirtualMachinesListHandleError func(*azcore.Response) error

type workloadNetworkVirtualMachinesListHandleResponse func(*azcore.Response) (WorkloadNetworkVirtualMachinesListResponse, error)

type workloadNetworkVirtualMachinesListAdvancePage func(context.Context, WorkloadNetworkVirtualMachinesListResponse) (*azcore.Request, error)

type workloadNetworkVirtualMachinesListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester workloadNetworkVirtualMachinesListCreateRequest
	// callback for handling response errors
	errorer workloadNetworkVirtualMachinesListHandleError
	// callback for handling the HTTP response
	responder workloadNetworkVirtualMachinesListHandleResponse
	// callback for advancing to the next page
	advancer workloadNetworkVirtualMachinesListAdvancePage
	// contains the current response
	current WorkloadNetworkVirtualMachinesListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *workloadNetworkVirtualMachinesListPager) Err() error {
	return p.err
}

func (p *workloadNetworkVirtualMachinesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadNetworkVirtualMachinesList.NextLink == nil || len(*p.current.WorkloadNetworkVirtualMachinesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *workloadNetworkVirtualMachinesListPager) PageResponse() WorkloadNetworkVirtualMachinesListResponse {
	return p.current
}
