// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
	"time"
)

// AdminCredentials - Administrative credentials for accessing vCenter and NSX-T
type AdminCredentials struct {
	// READ-ONLY; NSX-T Manager password
	NsxtPassword *string `json:"nsxtPassword,omitempty" azure:"ro"`

	// READ-ONLY; NSX-T Manager username
	NsxtUsername *string `json:"nsxtUsername,omitempty" azure:"ro"`

	// READ-ONLY; vCenter admin password
	VcenterPassword *string `json:"vcenterPassword,omitempty" azure:"ro"`

	// READ-ONLY; vCenter admin username
	VcenterUsername *string `json:"vcenterUsername,omitempty" azure:"ro"`
}

// AdminCredentialsResponse is the response envelope for operations that return a AdminCredentials type.
type AdminCredentialsResponse struct {
	// Administrative credentials for accessing vCenter and NSX-T
	AdminCredentials *AdminCredentials

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationsBeginCreateOrUpdateOptions contains the optional parameters for the Authorizations.BeginCreateOrUpdate method.
type AuthorizationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AuthorizationsBeginDeleteOptions contains the optional parameters for the Authorizations.BeginDelete method.
type AuthorizationsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// AuthorizationsGetOptions contains the optional parameters for the Authorizations.Get method.
type AuthorizationsGetOptions struct {
	// placeholder for future optional parameters
}

// AuthorizationsListOptions contains the optional parameters for the Authorizations.List method.
type AuthorizationsListOptions struct {
	// placeholder for future optional parameters
}

// Circuit - An ExpressRoute Circuit
type Circuit struct {
	// READ-ONLY; Identifier of the ExpressRoute Circuit (Microsoft Colo only)
	ExpressRouteID *string `json:"expressRouteID,omitempty" azure:"ro"`

	// READ-ONLY; ExpressRoute Circuit private peering identifier
	ExpressRoutePrivatePeeringID *string `json:"expressRoutePrivatePeeringID,omitempty" azure:"ro"`

	// READ-ONLY; CIDR of primary subnet
	PrimarySubnet *string `json:"primarySubnet,omitempty" azure:"ro"`

	// READ-ONLY; CIDR of secondary subnet
	SecondarySubnet *string `json:"secondarySubnet,omitempty" azure:"ro"`
}

// CloudError - API error response
type CloudError struct {
	// An error returned by the API
	InnerError *ErrorResponse `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
func (e CloudError) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += "InnerError: \n"
		if e.InnerError.Code != nil {
			msg += fmt.Sprintf("\tCode: %v\n", *e.InnerError.Code)
		}
		if e.InnerError.Message != nil {
			msg += fmt.Sprintf("\tMessage: %v\n", *e.InnerError.Message)
		}
		if e.InnerError.Target != nil {
			msg += fmt.Sprintf("\tTarget: %v\n", *e.InnerError.Target)
		}
		if e.InnerError.Details != nil {
			msg += fmt.Sprintf("\tDetails: %v\n", *e.InnerError.Details)
		}
		if e.InnerError.AdditionalInfo != nil {
			msg += fmt.Sprintf("\tAdditionalInfo: %v\n", *e.InnerError.AdditionalInfo)
		}
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Cluster - A cluster resource
type Cluster struct {
	Resource
	// The properties of a cluster resource
	Properties *ClusterProperties `json:"properties,omitempty"`

	// The cluster SKU
	SKU *SKU `json:"sku,omitempty"`
}

// ClusterList - A paged list of clusters
type ClusterList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on a page
	Value *[]*Cluster `json:"value,omitempty" azure:"ro"`
}

// ClusterListResponse is the response envelope for operations that return a ClusterList type.
type ClusterListResponse struct {
	// A paged list of clusters
	ClusterList *ClusterList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterPollerResponse is the response envelope for operations that asynchronously return a Cluster type.
type ClusterPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ClusterResponse, error)

	// Poller contains an initialized poller.
	Poller ClusterPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterProperties - The properties of a cluster
type ClusterProperties struct {
	CommonClusterProperties
}

// ClusterResponse is the response envelope for operations that return a Cluster type.
type ClusterResponse struct {
	// A cluster resource
	Cluster *Cluster

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterUpdate - An update of a cluster resource
type ClusterUpdate struct {
	// The properties of a cluster resource that may be updated
	Properties *ClusterUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ClusterUpdate.
func (c ClusterUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ClusterUpdateProperties - The properties of a cluster that may be updated
type ClusterUpdateProperties struct {
	// The cluster size
	ClusterSize *int32 `json:"clusterSize,omitempty"`
}

// ClustersBeginCreateOrUpdateOptions contains the optional parameters for the Clusters.BeginCreateOrUpdate method.
type ClustersBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ClustersBeginDeleteOptions contains the optional parameters for the Clusters.BeginDelete method.
type ClustersBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ClustersBeginUpdateOptions contains the optional parameters for the Clusters.BeginUpdate method.
type ClustersBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ClustersGetOptions contains the optional parameters for the Clusters.Get method.
type ClustersGetOptions struct {
	// placeholder for future optional parameters
}

// ClustersListOptions contains the optional parameters for the Clusters.List method.
type ClustersListOptions struct {
	// placeholder for future optional parameters
}

// CommonClusterProperties - The common properties of a cluster
type CommonClusterProperties struct {
	// READ-ONLY; The identity
	ClusterID *int32 `json:"clusterId,omitempty" azure:"ro"`

	// The cluster size
	ClusterSize *int32 `json:"clusterSize,omitempty"`

	// READ-ONLY; The hosts
	Hosts *[]*string `json:"hosts,omitempty" azure:"ro"`

	// READ-ONLY; The state of the cluster provisioning
	ProvisioningState *ClusterProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Endpoints - Endpoint addresses
type Endpoints struct {
	// READ-ONLY; Endpoint for the HCX Cloud Manager
	HcxCloudManager *string `json:"hcxCloudManager,omitempty" azure:"ro"`

	// READ-ONLY; Endpoint for the NSX-T Data Center manager
	NsxtManager *string `json:"nsxtManager,omitempty" azure:"ro"`

	// READ-ONLY; Endpoint for Virtual Center Server Appliance
	Vcsa *string `json:"vcsa,omitempty" azure:"ro"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.)
type ErrorResponse struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo *[]*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details *[]*ErrorResponse `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// ExpressRouteAuthorization - ExpressRoute Circuit Authorization
type ExpressRouteAuthorization struct {
	Resource
	// READ-ONLY; The properties of an ExpressRoute Circuit Authorization resource
	Properties *ExpressRouteAuthorizationProperties `json:"properties,omitempty" azure:"ro"`
}

// ExpressRouteAuthorizationList - A paged list of ExpressRoute Circuit Authorizations
type ExpressRouteAuthorizationList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on a page
	Value *[]*ExpressRouteAuthorization `json:"value,omitempty" azure:"ro"`
}

// ExpressRouteAuthorizationListResponse is the response envelope for operations that return a ExpressRouteAuthorizationList type.
type ExpressRouteAuthorizationListResponse struct {
	// A paged list of ExpressRoute Circuit Authorizations
	ExpressRouteAuthorizationList *ExpressRouteAuthorizationList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteAuthorizationPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteAuthorization type.
type ExpressRouteAuthorizationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteAuthorizationResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteAuthorizationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteAuthorizationProperties - The properties of an ExpressRoute Circuit Authorization resource
type ExpressRouteAuthorizationProperties struct {
	// READ-ONLY; The ID of the ExpressRoute Circuit Authorization
	ExpressRouteAuthorizationID *string `json:"expressRouteAuthorizationId,omitempty" azure:"ro"`

	// READ-ONLY; The key of the ExpressRoute Circuit Authorization
	ExpressRouteAuthorizationKey *string `json:"expressRouteAuthorizationKey,omitempty" azure:"ro"`

	// READ-ONLY; The state of the ExpressRoute Circuit Authorization provisioning
	ProvisioningState *ExpressRouteAuthorizationProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ExpressRouteAuthorizationResponse is the response envelope for operations that return a ExpressRouteAuthorization type.
type ExpressRouteAuthorizationResponse struct {
	// ExpressRoute Circuit Authorization
	ExpressRouteAuthorization *ExpressRouteAuthorization

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnection - A global reach connection resource
type GlobalReachConnection struct {
	Resource
	// The properties of a global reach connection resource
	Properties *GlobalReachConnectionProperties `json:"properties,omitempty"`
}

// GlobalReachConnectionList - A paged list of global reach connections
type GlobalReachConnectionList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on a page
	Value *[]*GlobalReachConnection `json:"value,omitempty" azure:"ro"`
}

// GlobalReachConnectionListResponse is the response envelope for operations that return a GlobalReachConnectionList type.
type GlobalReachConnectionListResponse struct {
	// A paged list of global reach connections
	GlobalReachConnectionList *GlobalReachConnectionList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionPollerResponse is the response envelope for operations that asynchronously return a GlobalReachConnection type.
type GlobalReachConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GlobalReachConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller GlobalReachConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionProperties - The properties of a global reach connection
type GlobalReachConnectionProperties struct {
	// READ-ONLY; The network used for global reach carved out from the original network block provided for the private cloud
	AddressPrefix *string `json:"addressPrefix,omitempty" azure:"ro"`

	// Authorization key from the peer express route used for the global reach connection
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// READ-ONLY; The connection status of the global reach connection
	CircuitConnectionStatus *GlobalReachConnectionStatus `json:"circuitConnectionStatus,omitempty" azure:"ro"`

	// Identifier of the ExpressRoute Circuit to peer with in the global reach connection
	PeerExpressRouteCircuit *string `json:"peerExpressRouteCircuit,omitempty"`

	// READ-ONLY; The state of the ExpressRoute Circuit Authorization provisioning
	ProvisioningState *GlobalReachConnectionProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// GlobalReachConnectionResponse is the response envelope for operations that return a GlobalReachConnection type.
type GlobalReachConnectionResponse struct {
	// A global reach connection resource
	GlobalReachConnection *GlobalReachConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the GlobalReachConnections.BeginCreateOrUpdate method.
type GlobalReachConnectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GlobalReachConnectionsBeginDeleteOptions contains the optional parameters for the GlobalReachConnections.BeginDelete method.
type GlobalReachConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GlobalReachConnectionsGetOptions contains the optional parameters for the GlobalReachConnections.Get method.
type GlobalReachConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// GlobalReachConnectionsListOptions contains the optional parameters for the GlobalReachConnections.List method.
type GlobalReachConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSite - An HCX Enterprise Site resource
type HcxEnterpriseSite struct {
	Resource
	// READ-ONLY; The properties of an HCX Enterprise Site resource
	Properties *HcxEnterpriseSiteProperties `json:"properties,omitempty" azure:"ro"`
}

// HcxEnterpriseSiteList - A paged list of HCX Enterprise Sites
type HcxEnterpriseSiteList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on a page
	Value *[]*HcxEnterpriseSite `json:"value,omitempty" azure:"ro"`
}

// HcxEnterpriseSiteListResponse is the response envelope for operations that return a HcxEnterpriseSiteList type.
type HcxEnterpriseSiteListResponse struct {
	// A paged list of HCX Enterprise Sites
	HcxEnterpriseSiteList *HcxEnterpriseSiteList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSiteProperties - The properties of an HCX Enterprise Site
type HcxEnterpriseSiteProperties struct {
	// READ-ONLY; The activation key
	ActivationKey *string `json:"activationKey,omitempty" azure:"ro"`

	// READ-ONLY; The status of the HCX Enterprise Site
	Status *HcxEnterpriseSiteStatus `json:"status,omitempty" azure:"ro"`
}

// HcxEnterpriseSiteResponse is the response envelope for operations that return a HcxEnterpriseSite type.
type HcxEnterpriseSiteResponse struct {
	// An HCX Enterprise Site resource
	HcxEnterpriseSite *HcxEnterpriseSite

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSitesCreateOrUpdateOptions contains the optional parameters for the HcxEnterpriseSites.CreateOrUpdate method.
type HcxEnterpriseSitesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// HcxEnterpriseSitesDeleteOptions contains the optional parameters for the HcxEnterpriseSites.Delete method.
type HcxEnterpriseSitesDeleteOptions struct {
	// placeholder for future optional parameters
}

// HcxEnterpriseSitesGetOptions contains the optional parameters for the HcxEnterpriseSites.Get method.
type HcxEnterpriseSitesGetOptions struct {
	// placeholder for future optional parameters
}

// HcxEnterpriseSitesListOptions contains the optional parameters for the HcxEnterpriseSites.List method.
type HcxEnterpriseSitesListOptions struct {
	// placeholder for future optional parameters
}

// IdentitySource - vCenter Single Sign On Identity Source
type IdentitySource struct {
	// The domain's NetBIOS name
	Alias *string `json:"alias,omitempty"`

	// The base distinguished name for groups
	BaseGroupDN *string `json:"baseGroupDN,omitempty"`

	// The base distinguished name for users
	BaseUserDN *string `json:"baseUserDN,omitempty"`

	// The domain's dns name
	Domain *string `json:"domain,omitempty"`

	// The name of the identity source
	Name *string `json:"name,omitempty"`

	// The password of the Active Directory user with a minimum of read-only access to Base DN for users and groups.
	Password *string `json:"password,omitempty"`

	// Primary server URL
	PrimaryServer *string `json:"primaryServer,omitempty"`

	// Protect LDAP communication using SSL certificate (LDAPS)
	SSL *SSLEnum `json:"ssl,omitempty"`

	// Secondary server URL
	SecondaryServer *string `json:"secondaryServer,omitempty"`

	// The ID of an Active Directory user with a minimum of read-only access to Base DN for users and group
	Username *string `json:"username,omitempty"`
}

// LocationsCheckQuotaAvailabilityOptions contains the optional parameters for the Locations.CheckQuotaAvailability method.
type LocationsCheckQuotaAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// LocationsCheckTrialAvailabilityOptions contains the optional parameters for the Locations.CheckTrialAvailability method.
type LocationsCheckTrialAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// LogSpecification - Specifications of the Log for Azure Monitoring
type LogSpecification struct {
	// Blob duration of the log
	BlobDuration *string `json:"blobDuration,omitempty"`

	// Localized friendly display name of the log
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the log
	Name *string `json:"name,omitempty"`
}

// ManagementCluster - The properties of a management cluster
type ManagementCluster struct {
	CommonClusterProperties
}

// MetricDimension - Specifications of the Dimension of metrics
type MetricDimension struct {
	// Localized friendly display name of the dimension
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the dimension
	Name *string `json:"name,omitempty"`
}

// MetricSpecification - Specifications of the Metrics for Azure Monitoring
type MetricSpecification struct {
	// Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
	AggregationType *string `json:"aggregationType,omitempty"`

	// Name of the metric category that the metric belongs to. A metric can only belong to a single category.
	Category *string `json:"category,omitempty"`

	// Dimensions of the metric
	Dimensions *[]*MetricDimension `json:"dimensions,omitempty"`

	// Localized friendly description of the metric
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// Localized friendly display name of the metric
	DisplayName *string `json:"displayName,omitempty"`

	// Whether or not the service is using regional MDM accounts.
	EnableRegionalMdmAccount *string `json:"enableRegionalMdmAccount,omitempty"`

	// Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.
	FillGapWithZero *bool `json:"fillGapWithZero,omitempty"`

	// Name of the metric
	Name *string `json:"name,omitempty"`

	// The name of the MDM account.
	SourceMdmAccount *string `json:"sourceMdmAccount,omitempty"`

	// The name of the MDM namespace.
	SourceMdmNamespace *string `json:"sourceMdmNamespace,omitempty"`

	// Supported aggregation types
	SupportedAggregationTypes *[]*string `json:"supportedAggregationTypes,omitempty"`

	// Supported time grain types
	SupportedTimeGrainTypes *[]*string `json:"supportedTimeGrainTypes,omitempty"`

	// Unit that makes sense for the metric
	Unit *string `json:"unit,omitempty"`
}

// Operation - A REST API operation
type Operation struct {
	// READ-ONLY; Contains the localized display information for this operation
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// Gets or sets a value indicating whether the operation is a data action or not
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// READ-ONLY; Name of the operation being performed on this object
	Name *string `json:"name,omitempty" azure:"ro"`

	// Origin of the operation
	Origin *string `json:"origin,omitempty"`

	// Properties of the operation
	Properties *OperationProperties `json:"properties,omitempty"`
}

// OperationDisplay - Contains the localized display information for this operation
type OperationDisplay struct {
	// READ-ONLY; Localized friendly description for the operation
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Localized friendly name for the operation
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Localized friendly form of the resource provider name
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Localized friendly form of the resource type related to this operation
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationList - Pageable list of operations
type OperationList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of operations
	Value *[]*Operation `json:"value,omitempty" azure:"ro"`
}

// OperationListResponse is the response envelope for operations that return a OperationList type.
type OperationListResponse struct {
	// Pageable list of operations
	OperationList *OperationList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationProperties - Extra Operation properties
type OperationProperties struct {
	// Service specifications of the operation
	ServiceSpecification *ServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloud - A private cloud resource
type PrivateCloud struct {
	TrackedResource
	// The properties of a private cloud resource
	Properties *PrivateCloudProperties `json:"properties,omitempty"`

	// The private cloud SKU
	SKU *SKU `json:"sku,omitempty"`
}

// PrivateCloudList - A paged list of private clouds
type PrivateCloudList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*PrivateCloud `json:"value,omitempty" azure:"ro"`
}

// PrivateCloudListResponse is the response envelope for operations that return a PrivateCloudList type.
type PrivateCloudListResponse struct {
	// A paged list of private clouds
	PrivateCloudList *PrivateCloudList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudPollerResponse is the response envelope for operations that asynchronously return a PrivateCloud type.
type PrivateCloudPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateCloudResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateCloudPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudProperties - The properties of a private cloud resource
type PrivateCloudProperties struct {
	PrivateCloudUpdateProperties
	// An ExpressRoute Circuit
	Circuit *Circuit `json:"circuit,omitempty"`

	// READ-ONLY; The endpoints
	Endpoints *Endpoints `json:"endpoints,omitempty" azure:"ro"`

	// READ-ONLY; Network used to access vCenter Server and NSX-T Manager
	ManagementNetwork *string `json:"managementNetwork,omitempty" azure:"ro"`

	// The block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X)
	// where A,B,C,D are between 0 and 255, and X is
	// between 0 and 22
	NetworkBlock *string `json:"networkBlock,omitempty"`

	// READ-ONLY; Thumbprint of the NSX-T Manager SSL certificate
	NsxtCertificateThumbprint *string `json:"nsxtCertificateThumbprint,omitempty" azure:"ro"`

	// Optionally, set the NSX-T Manager password when the private cloud is created
	NsxtPassword *string `json:"nsxtPassword,omitempty"`

	// READ-ONLY; Used for virtual machine cold migration, cloning, and snapshot migration
	ProvisioningNetwork *string `json:"provisioningNetwork,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state
	ProvisioningState *PrivateCloudProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Thumbprint of the vCenter Server SSL certificate
	VcenterCertificateThumbprint *string `json:"vcenterCertificateThumbprint,omitempty" azure:"ro"`

	// Optionally, set the vCenter admin password when the private cloud is created
	VcenterPassword *string `json:"vcenterPassword,omitempty"`

	// READ-ONLY; Used for live migration of virtual machines
	VmotionNetwork *string `json:"vmotionNetwork,omitempty" azure:"ro"`
}

// PrivateCloudResponse is the response envelope for operations that return a PrivateCloud type.
type PrivateCloudResponse struct {
	// A private cloud resource
	PrivateCloud *PrivateCloud

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudUpdate - An update to a private cloud resource
type PrivateCloudUpdate struct {
	// The updatable properties of a private cloud resource
	Properties *PrivateCloudUpdateProperties `json:"properties,omitempty"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateCloudUpdate.
func (p PrivateCloudUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PrivateCloudUpdateProperties - The properties of a private cloud resource that may be updated
type PrivateCloudUpdateProperties struct {
	// vCenter Single Sign On Identity Sources
	IdentitySources *[]*IdentitySource `json:"identitySources,omitempty"`

	// Connectivity to internet is enabled or disabled
	Internet *InternetEnum `json:"internet,omitempty"`

	// The default cluster used for management
	ManagementCluster *ManagementCluster `json:"managementCluster,omitempty"`

	// Indicate to rotate the NSX-T Manager password for the private cloud
	NsxtPassword *NsxtAdminRotateEnum `json:"nsxtPassword,omitempty"`

	// Indicate to rotate the vCenter admin password for the private cloud
	VcenterPassword *VcsaAdminRotateEnum `json:"vcenterPassword,omitempty"`
}

// PrivateCloudsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateClouds.BeginCreateOrUpdate method.
type PrivateCloudsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsBeginDeleteOptions contains the optional parameters for the PrivateClouds.BeginDelete method.
type PrivateCloudsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsBeginUpdateOptions contains the optional parameters for the PrivateClouds.BeginUpdate method.
type PrivateCloudsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsGetOptions contains the optional parameters for the PrivateClouds.Get method.
type PrivateCloudsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsListAdminCredentialsOptions contains the optional parameters for the PrivateClouds.ListAdminCredentials method.
type PrivateCloudsListAdminCredentialsOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsListInSubscriptionOptions contains the optional parameters for the PrivateClouds.ListInSubscription method.
type PrivateCloudsListInSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PrivateCloudsListOptions contains the optional parameters for the PrivateClouds.List method.
type PrivateCloudsListOptions struct {
	// placeholder for future optional parameters
}

// ProxyResource - The resource model definition for a ARM proxy resource
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal() map[string]interface{} {
	objectMap := p.Resource.marshalInternal()
	return objectMap
}

// Quota - Subscription quotas
type Quota struct {
	// READ-ONLY; Remaining hosts quota by sku type
	HostsRemaining *map[string]*int32 `json:"hostsRemaining,omitempty" azure:"ro"`

	// READ-ONLY; Host quota is active for current subscription
	QuotaEnabled *QuotaEnabled `json:"quotaEnabled,omitempty" azure:"ro"`
}

// QuotaResponse is the response envelope for operations that return a Quota type.
type QuotaResponse struct {
	// Subscription quotas
	Quota *Quota

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Resource - The core properties of ARM resources
type Resource struct {
	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

func (r Resource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return objectMap
}

// SKU - The resource model definition representing SKU
type SKU struct {
	// The name of the SKU.
	Name *string `json:"name,omitempty"`
}

// ServiceSpecification - Service specification payload
type ServiceSpecification struct {
	// Specifications of the Log for Azure Monitoring
	LogSpecifications *[]*LogSpecification `json:"logSpecifications,omitempty"`

	// Specifications of the Metrics for Azure Monitoring
	MetricSpecifications *[]*MetricSpecification `json:"metricSpecifications,omitempty"`
}

// TrackedResource - The resource model definition for a ARM tracked top level resource
type TrackedResource struct {
	Resource
	// Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// Trial - Subscription trial availability
type Trial struct {
	// READ-ONLY; Number of trial hosts available
	AvailableHosts *int32 `json:"availableHosts,omitempty" azure:"ro"`

	// READ-ONLY; Trial status
	Status *TrialStatus `json:"status,omitempty" azure:"ro"`
}

// TrialResponse is the response envelope for operations that return a Trial type.
type TrialResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Subscription trial availability
	Trial *Trial
}

// WorkloadNetworkDhcp - NSX DHCP
type WorkloadNetworkDhcp struct {
	ProxyResource
	// DHCP properties.
	Properties WorkloadNetworkDhcpEntityClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkDhcp.
func (w WorkloadNetworkDhcp) MarshalJSON() ([]byte, error) {
	objectMap := w.ProxyResource.marshalInternal()
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WorkloadNetworkDhcpEntityClassification provides polymorphic access to related types.
// Call the interface's GetWorkloadNetworkDhcpEntity() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *WorkloadNetworkDhcpEntity, *WorkloadNetworkDhcpRelay, *WorkloadNetworkDhcpServer
type WorkloadNetworkDhcpEntityClassification interface {
	// GetWorkloadNetworkDhcpEntity returns the WorkloadNetworkDhcpEntity content of the underlying type.
	GetWorkloadNetworkDhcpEntity() *WorkloadNetworkDhcpEntity
}

// WorkloadNetworkDhcpEntity - Base class for WorkloadNetworkDhcpServer and WorkloadNetworkDhcpRelay to inherit from
type WorkloadNetworkDhcpEntity struct {
	// Type of DHCP: SERVER or RELAY.
	DhcpType *DhcpTypeEnum `json:"dhcpType,omitempty"`

	// Display name of the DHCP entity.
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; The provisioning state
	ProvisioningState *WorkloadNetworkDhcpProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// NSX revision number.
	Revision *int64 `json:"revision,omitempty"`

	// READ-ONLY; NSX Segments consuming DHCP.
	Segments *[]*string `json:"segments,omitempty" azure:"ro"`
}

// GetWorkloadNetworkDhcpEntity implements the WorkloadNetworkDhcpEntityClassification interface for type WorkloadNetworkDhcpEntity.
func (w *WorkloadNetworkDhcpEntity) GetWorkloadNetworkDhcpEntity() *WorkloadNetworkDhcpEntity {
	return w
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadNetworkDhcpEntity.
func (w *WorkloadNetworkDhcpEntity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return w.unmarshalInternal(rawMsg)
}

func (w WorkloadNetworkDhcpEntity) marshalInternal(discValue DhcpTypeEnum) map[string]interface{} {
	objectMap := make(map[string]interface{})
	w.DhcpType = &discValue
	objectMap["dhcpType"] = w.DhcpType
	populate(objectMap, "displayName", w.DisplayName)
	populate(objectMap, "provisioningState", w.ProvisioningState)
	populate(objectMap, "revision", w.Revision)
	populate(objectMap, "segments", w.Segments)
	return objectMap
}

func (w *WorkloadNetworkDhcpEntity) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dhcpType":
			err = unpopulate(val, &w.DhcpType)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &w.DisplayName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &w.ProvisioningState)
			delete(rawMsg, key)
		case "revision":
			err = unpopulate(val, &w.Revision)
			delete(rawMsg, key)
		case "segments":
			err = unpopulate(val, &w.Segments)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WorkloadNetworkDhcpList - A list of NSX dhcp entities
type WorkloadNetworkDhcpList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkDhcp `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkDhcpListResponse is the response envelope for operations that return a WorkloadNetworkDhcpList type.
type WorkloadNetworkDhcpListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX dhcp entities
	WorkloadNetworkDhcpList *WorkloadNetworkDhcpList
}

// WorkloadNetworkDhcpPollerResponse is the response envelope for operations that asynchronously return a WorkloadNetworkDhcp type.
type WorkloadNetworkDhcpPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (WorkloadNetworkDhcpResponse, error)

	// Poller contains an initialized poller.
	Poller WorkloadNetworkDhcpPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworkDhcpRelay - NSX DHCP Relay
type WorkloadNetworkDhcpRelay struct {
	WorkloadNetworkDhcpEntity
	// DHCP Relay Addresses. Max 3.
	ServerAddresses *[]*string `json:"serverAddresses,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkDhcpRelay.
func (w WorkloadNetworkDhcpRelay) MarshalJSON() ([]byte, error) {
	objectMap := w.WorkloadNetworkDhcpEntity.marshalInternal("RELAY")
	populate(objectMap, "serverAddresses", w.ServerAddresses)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadNetworkDhcpRelay.
func (w *WorkloadNetworkDhcpRelay) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "serverAddresses":
			err = unpopulate(val, &w.ServerAddresses)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return w.WorkloadNetworkDhcpEntity.unmarshalInternal(rawMsg)
}

// WorkloadNetworkDhcpResponse is the response envelope for operations that return a WorkloadNetworkDhcp type.
type WorkloadNetworkDhcpResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX DHCP
	WorkloadNetworkDhcp *WorkloadNetworkDhcp
}

// WorkloadNetworkDhcpServer - NSX DHCP Server
type WorkloadNetworkDhcpServer struct {
	WorkloadNetworkDhcpEntity
	// DHCP Server Lease Time.
	LeaseTime *int64 `json:"leaseTime,omitempty"`

	// DHCP Server Address.
	ServerAddress *string `json:"serverAddress,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkDhcpServer.
func (w WorkloadNetworkDhcpServer) MarshalJSON() ([]byte, error) {
	objectMap := w.WorkloadNetworkDhcpEntity.marshalInternal("SERVER")
	populate(objectMap, "leaseTime", w.LeaseTime)
	populate(objectMap, "serverAddress", w.ServerAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkloadNetworkDhcpServer.
func (w *WorkloadNetworkDhcpServer) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "leaseTime":
			err = unpopulate(val, &w.LeaseTime)
			delete(rawMsg, key)
		case "serverAddress":
			err = unpopulate(val, &w.ServerAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return w.WorkloadNetworkDhcpEntity.unmarshalInternal(rawMsg)
}

// WorkloadNetworkGateway - NSX Gateway.
type WorkloadNetworkGateway struct {
	ProxyResource
	// Gateway properties.
	Properties *WorkloadNetworkGatewayProperties `json:"properties,omitempty"`
}

// WorkloadNetworkGatewayList - A list of NSX Gateways
type WorkloadNetworkGatewayList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkGateway `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkGatewayListResponse is the response envelope for operations that return a WorkloadNetworkGatewayList type.
type WorkloadNetworkGatewayListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX Gateways
	WorkloadNetworkGatewayList *WorkloadNetworkGatewayList
}

// WorkloadNetworkGatewayProperties - Properties of a NSX Gateway.
type WorkloadNetworkGatewayProperties struct {
	// Display name of the DHCP entity.
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; NSX Gateway Path.
	Path *string `json:"path,omitempty" azure:"ro"`
}

// WorkloadNetworkGatewayResponse is the response envelope for operations that return a WorkloadNetworkGateway type.
type WorkloadNetworkGatewayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX Gateway.
	WorkloadNetworkGateway *WorkloadNetworkGateway
}

// WorkloadNetworkPortMirroring - NSX Port Mirroring
type WorkloadNetworkPortMirroring struct {
	ProxyResource
	// Port Mirroring Properties.
	Properties *WorkloadNetworkPortMirroringProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkPortMirroring.
func (w WorkloadNetworkPortMirroring) MarshalJSON() ([]byte, error) {
	objectMap := w.ProxyResource.marshalInternal()
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WorkloadNetworkPortMirroringList - A list of NSX Port Mirroring
type WorkloadNetworkPortMirroringList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkPortMirroring `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkPortMirroringListResponse is the response envelope for operations that return a WorkloadNetworkPortMirroringList type.
type WorkloadNetworkPortMirroringListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX Port Mirroring
	WorkloadNetworkPortMirroringList *WorkloadNetworkPortMirroringList
}

// WorkloadNetworkPortMirroringPollerResponse is the response envelope for operations that asynchronously return a WorkloadNetworkPortMirroring type.
type WorkloadNetworkPortMirroringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (WorkloadNetworkPortMirroringResponse, error)

	// Poller contains an initialized poller.
	Poller WorkloadNetworkPortMirroringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworkPortMirroringProperties - NSX Port Mirroring Properties
type WorkloadNetworkPortMirroringProperties struct {
	// Destination VM Group.
	Destination *string `json:"destination,omitempty"`

	// Direction of port mirroring profile.
	Direction *PortMirroringDirectionEnum `json:"direction,omitempty"`

	// Display name of the port mirroring profile.
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; The provisioning state
	ProvisioningState *WorkloadNetworkPortMirroringProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// NSX revision number.
	Revision *int64 `json:"revision,omitempty"`

	// Source VM Group.
	Source *string `json:"source,omitempty"`

	// READ-ONLY; Port Mirroring Status.
	Status *PortMirroringStatusEnum `json:"status,omitempty" azure:"ro"`
}

// WorkloadNetworkPortMirroringResponse is the response envelope for operations that return a WorkloadNetworkPortMirroring type.
type WorkloadNetworkPortMirroringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX Port Mirroring
	WorkloadNetworkPortMirroring *WorkloadNetworkPortMirroring
}

// WorkloadNetworkSegment - NSX Segment
type WorkloadNetworkSegment struct {
	ProxyResource
	// The properties of a Workload Segment proxy resource.
	Properties *WorkloadNetworkSegmentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkSegment.
func (w WorkloadNetworkSegment) MarshalJSON() ([]byte, error) {
	objectMap := w.ProxyResource.marshalInternal()
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WorkloadNetworkSegmentPollerResponse is the response envelope for operations that asynchronously return a WorkloadNetworkSegment type.
type WorkloadNetworkSegmentPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (WorkloadNetworkSegmentResponse, error)

	// Poller contains an initialized poller.
	Poller WorkloadNetworkSegmentPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworkSegmentPortVif - Ports and any VIF attached to segment.
type WorkloadNetworkSegmentPortVif struct {
	// Name of port or VIF attached to segment.
	PortName *string `json:"portName,omitempty"`
}

// WorkloadNetworkSegmentProperties - NSX Segment Properties
type WorkloadNetworkSegmentProperties struct {
	// Gateway which to connect segment to.
	ConnectedGateway *string `json:"connectedGateway,omitempty"`

	// Display name of the segment.
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; Port Vif which segment is associated with.
	PortVif *[]*WorkloadNetworkSegmentPortVif `json:"portVif,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state
	ProvisioningState *WorkloadNetworkSegmentProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// NSX revision number.
	Revision *int64 `json:"revision,omitempty"`

	// READ-ONLY; Segment status.
	Status *SegmentStatusEnum `json:"status,omitempty" azure:"ro"`

	// Subnet which to connect segment to.
	Subnet *WorkloadNetworkSegmentSubnet `json:"subnet,omitempty"`
}

// WorkloadNetworkSegmentResponse is the response envelope for operations that return a WorkloadNetworkSegment type.
type WorkloadNetworkSegmentResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX Segment
	WorkloadNetworkSegment *WorkloadNetworkSegment
}

// WorkloadNetworkSegmentSubnet - Subnet configuration for segment
type WorkloadNetworkSegmentSubnet struct {
	// DHCP Range assigned for subnet.
	DhcpRanges *[]*string `json:"dhcpRanges,omitempty"`

	// Gateway address.
	GatewayAddress *string `json:"gatewayAddress,omitempty"`
}

// WorkloadNetworkSegmentsList - A list of NSX Segments
type WorkloadNetworkSegmentsList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkSegment `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkSegmentsListResponse is the response envelope for operations that return a WorkloadNetworkSegmentsList type.
type WorkloadNetworkSegmentsListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX Segments
	WorkloadNetworkSegmentsList *WorkloadNetworkSegmentsList
}

// WorkloadNetworkVMGroup - NSX VM Group
type WorkloadNetworkVMGroup struct {
	ProxyResource
	// VM Group properties.
	Properties *WorkloadNetworkVMGroupProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkloadNetworkVMGroup.
func (w WorkloadNetworkVMGroup) MarshalJSON() ([]byte, error) {
	objectMap := w.ProxyResource.marshalInternal()
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WorkloadNetworkVMGroupPollerResponse is the response envelope for operations that asynchronously return a WorkloadNetworkVMGroup type.
type WorkloadNetworkVMGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (WorkloadNetworkVMGroupResponse, error)

	// Poller contains an initialized poller.
	Poller WorkloadNetworkVMGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworkVMGroupProperties - NSX VM Group Properties
type WorkloadNetworkVMGroupProperties struct {
	// Display name of the VM group.
	DisplayName *string `json:"displayName,omitempty"`

	// Virtual machine members of this group.
	Members *[]*string `json:"members,omitempty"`

	// READ-ONLY; The provisioning state
	ProvisioningState *WorkloadNetworkVMGroupProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// NSX revision number.
	Revision *int64 `json:"revision,omitempty"`

	// READ-ONLY; VM Group status.
	Status *VMGroupStatusEnum `json:"status,omitempty" azure:"ro"`
}

// WorkloadNetworkVMGroupResponse is the response envelope for operations that return a WorkloadNetworkVMGroup type.
type WorkloadNetworkVMGroupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX VM Group
	WorkloadNetworkVMGroup *WorkloadNetworkVMGroup
}

// WorkloadNetworkVMGroupsList - A list of NSX VM Groups
type WorkloadNetworkVMGroupsList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkVMGroup `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkVMGroupsListResponse is the response envelope for operations that return a WorkloadNetworkVMGroupsList type.
type WorkloadNetworkVMGroupsListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX VM Groups
	WorkloadNetworkVMGroupsList *WorkloadNetworkVMGroupsList
}

// WorkloadNetworkVirtualMachine - NSX Virtual Machine
type WorkloadNetworkVirtualMachine struct {
	ProxyResource
	// Virtual machine properties.
	Properties *WorkloadNetworkVirtualMachineProperties `json:"properties,omitempty"`
}

// WorkloadNetworkVirtualMachineProperties - NSX Virtual Machine Properties
type WorkloadNetworkVirtualMachineProperties struct {
	// Display name of the VM.
	DisplayName *string `json:"displayName,omitempty"`

	// READ-ONLY; Virtual machine type.
	VMType *VMTypeEnum `json:"vmType,omitempty" azure:"ro"`
}

// WorkloadNetworkVirtualMachineResponse is the response envelope for operations that return a WorkloadNetworkVirtualMachine type.
type WorkloadNetworkVirtualMachineResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// NSX Virtual Machine
	WorkloadNetworkVirtualMachine *WorkloadNetworkVirtualMachine
}

// WorkloadNetworkVirtualMachinesList - A list of NSX Virtual Machines
type WorkloadNetworkVirtualMachinesList struct {
	// READ-ONLY; URL to get the next page if any
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The items on the page
	Value *[]*WorkloadNetworkVirtualMachine `json:"value,omitempty" azure:"ro"`
}

// WorkloadNetworkVirtualMachinesListResponse is the response envelope for operations that return a WorkloadNetworkVirtualMachinesList type.
type WorkloadNetworkVirtualMachinesListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A list of NSX Virtual Machines
	WorkloadNetworkVirtualMachinesList *WorkloadNetworkVirtualMachinesList
}

// WorkloadNetworksBeginCreateDhcpOptions contains the optional parameters for the WorkloadNetworks.BeginCreateDhcp method.
type WorkloadNetworksBeginCreateDhcpOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginCreatePortMirroringOptions contains the optional parameters for the WorkloadNetworks.BeginCreatePortMirroring method.
type WorkloadNetworksBeginCreatePortMirroringOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginCreateSegmentsOptions contains the optional parameters for the WorkloadNetworks.BeginCreateSegments method.
type WorkloadNetworksBeginCreateSegmentsOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginCreateVMGroupOptions contains the optional parameters for the WorkloadNetworks.BeginCreateVMGroup method.
type WorkloadNetworksBeginCreateVMGroupOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginDeleteDhcpOptions contains the optional parameters for the WorkloadNetworks.BeginDeleteDhcp method.
type WorkloadNetworksBeginDeleteDhcpOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginDeletePortMirroringOptions contains the optional parameters for the WorkloadNetworks.BeginDeletePortMirroring method.
type WorkloadNetworksBeginDeletePortMirroringOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginDeleteSegmentOptions contains the optional parameters for the WorkloadNetworks.BeginDeleteSegment method.
type WorkloadNetworksBeginDeleteSegmentOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginDeleteVMGroupOptions contains the optional parameters for the WorkloadNetworks.BeginDeleteVMGroup method.
type WorkloadNetworksBeginDeleteVMGroupOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginUpdateDhcpOptions contains the optional parameters for the WorkloadNetworks.BeginUpdateDhcp method.
type WorkloadNetworksBeginUpdateDhcpOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginUpdatePortMirroringOptions contains the optional parameters for the WorkloadNetworks.BeginUpdatePortMirroring method.
type WorkloadNetworksBeginUpdatePortMirroringOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginUpdateSegmentsOptions contains the optional parameters for the WorkloadNetworks.BeginUpdateSegments method.
type WorkloadNetworksBeginUpdateSegmentsOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksBeginUpdateVMGroupOptions contains the optional parameters for the WorkloadNetworks.BeginUpdateVMGroup method.
type WorkloadNetworksBeginUpdateVMGroupOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetDhcpOptions contains the optional parameters for the WorkloadNetworks.GetDhcp method.
type WorkloadNetworksGetDhcpOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetGatewayOptions contains the optional parameters for the WorkloadNetworks.GetGateway method.
type WorkloadNetworksGetGatewayOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetPortMirroringOptions contains the optional parameters for the WorkloadNetworks.GetPortMirroring method.
type WorkloadNetworksGetPortMirroringOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetSegmentOptions contains the optional parameters for the WorkloadNetworks.GetSegment method.
type WorkloadNetworksGetSegmentOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetVMGroupOptions contains the optional parameters for the WorkloadNetworks.GetVMGroup method.
type WorkloadNetworksGetVMGroupOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksGetVirtualMachineOptions contains the optional parameters for the WorkloadNetworks.GetVirtualMachine method.
type WorkloadNetworksGetVirtualMachineOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListDhcpOptions contains the optional parameters for the WorkloadNetworks.ListDhcp method.
type WorkloadNetworksListDhcpOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListGatewaysOptions contains the optional parameters for the WorkloadNetworks.ListGateways method.
type WorkloadNetworksListGatewaysOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListPortMirroringOptions contains the optional parameters for the WorkloadNetworks.ListPortMirroring method.
type WorkloadNetworksListPortMirroringOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListSegmentsOptions contains the optional parameters for the WorkloadNetworks.ListSegments method.
type WorkloadNetworksListSegmentsOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListVMGroupsOptions contains the optional parameters for the WorkloadNetworks.ListVMGroups method.
type WorkloadNetworksListVMGroupsOptions struct {
	// placeholder for future optional parameters
}

// WorkloadNetworksListVirtualMachinesOptions contains the optional parameters for the WorkloadNetworks.ListVirtualMachines method.
type WorkloadNetworksListVirtualMachinesOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data *json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(*data, v)
}
