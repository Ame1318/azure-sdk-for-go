// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ClusterPoller provides polling facilities until the operation reaches a terminal state.
type ClusterPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ClusterResponse will be returned.
	FinalResponse(ctx context.Context) (ClusterResponse, error)
}

type clusterPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *clusterPoller) Done() bool {
	return p.pt.Done()
}

func (p *clusterPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *clusterPoller) FinalResponse(ctx context.Context) (ClusterResponse, error) {
	respType := ClusterResponse{Cluster: &Cluster{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.Cluster)
	if err != nil {
		return ClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *clusterPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *clusterPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ClusterResponse, error) {
	respType := ClusterResponse{Cluster: &Cluster{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.Cluster)
	if err != nil {
		return ClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ExpressRouteAuthorizationPoller provides polling facilities until the operation reaches a terminal state.
type ExpressRouteAuthorizationPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ExpressRouteAuthorizationResponse will be returned.
	FinalResponse(ctx context.Context) (ExpressRouteAuthorizationResponse, error)
}

type expressRouteAuthorizationPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *expressRouteAuthorizationPoller) Done() bool {
	return p.pt.Done()
}

func (p *expressRouteAuthorizationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *expressRouteAuthorizationPoller) FinalResponse(ctx context.Context) (ExpressRouteAuthorizationResponse, error) {
	respType := ExpressRouteAuthorizationResponse{ExpressRouteAuthorization: &ExpressRouteAuthorization{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.ExpressRouteAuthorization)
	if err != nil {
		return ExpressRouteAuthorizationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *expressRouteAuthorizationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *expressRouteAuthorizationPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ExpressRouteAuthorizationResponse, error) {
	respType := ExpressRouteAuthorizationResponse{ExpressRouteAuthorization: &ExpressRouteAuthorization{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.ExpressRouteAuthorization)
	if err != nil {
		return ExpressRouteAuthorizationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GlobalReachConnectionPoller provides polling facilities until the operation reaches a terminal state.
type GlobalReachConnectionPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final GlobalReachConnectionResponse will be returned.
	FinalResponse(ctx context.Context) (GlobalReachConnectionResponse, error)
}

type globalReachConnectionPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *globalReachConnectionPoller) Done() bool {
	return p.pt.Done()
}

func (p *globalReachConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *globalReachConnectionPoller) FinalResponse(ctx context.Context) (GlobalReachConnectionResponse, error) {
	respType := GlobalReachConnectionResponse{GlobalReachConnection: &GlobalReachConnection{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.GlobalReachConnection)
	if err != nil {
		return GlobalReachConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *globalReachConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *globalReachConnectionPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (GlobalReachConnectionResponse, error) {
	respType := GlobalReachConnectionResponse{GlobalReachConnection: &GlobalReachConnection{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.GlobalReachConnection)
	if err != nil {
		return GlobalReachConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, p.pipeline, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, frequency, p.pipeline, nil)
}

// PrivateCloudPoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateCloudResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateCloudResponse, error)
}

type privateCloudPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *privateCloudPoller) Done() bool {
	return p.pt.Done()
}

func (p *privateCloudPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *privateCloudPoller) FinalResponse(ctx context.Context) (PrivateCloudResponse, error) {
	respType := PrivateCloudResponse{PrivateCloud: &PrivateCloud{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.PrivateCloud)
	if err != nil {
		return PrivateCloudResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateCloudPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateCloudPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (PrivateCloudResponse, error) {
	respType := PrivateCloudResponse{PrivateCloud: &PrivateCloud{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.PrivateCloud)
	if err != nil {
		return PrivateCloudResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WorkloadNetworkDhcpPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworkDhcpPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WorkloadNetworkDhcpResponse will be returned.
	FinalResponse(ctx context.Context) (WorkloadNetworkDhcpResponse, error)
}

type workloadNetworkDhcpPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *workloadNetworkDhcpPoller) Done() bool {
	return p.pt.Done()
}

func (p *workloadNetworkDhcpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *workloadNetworkDhcpPoller) FinalResponse(ctx context.Context) (WorkloadNetworkDhcpResponse, error) {
	respType := WorkloadNetworkDhcpResponse{WorkloadNetworkDhcp: &WorkloadNetworkDhcp{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.WorkloadNetworkDhcp)
	if err != nil {
		return WorkloadNetworkDhcpResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *workloadNetworkDhcpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *workloadNetworkDhcpPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (WorkloadNetworkDhcpResponse, error) {
	respType := WorkloadNetworkDhcpResponse{WorkloadNetworkDhcp: &WorkloadNetworkDhcp{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.WorkloadNetworkDhcp)
	if err != nil {
		return WorkloadNetworkDhcpResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WorkloadNetworkPortMirroringPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworkPortMirroringPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WorkloadNetworkPortMirroringResponse will be returned.
	FinalResponse(ctx context.Context) (WorkloadNetworkPortMirroringResponse, error)
}

type workloadNetworkPortMirroringPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *workloadNetworkPortMirroringPoller) Done() bool {
	return p.pt.Done()
}

func (p *workloadNetworkPortMirroringPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *workloadNetworkPortMirroringPoller) FinalResponse(ctx context.Context) (WorkloadNetworkPortMirroringResponse, error) {
	respType := WorkloadNetworkPortMirroringResponse{WorkloadNetworkPortMirroring: &WorkloadNetworkPortMirroring{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return WorkloadNetworkPortMirroringResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *workloadNetworkPortMirroringPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *workloadNetworkPortMirroringPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (WorkloadNetworkPortMirroringResponse, error) {
	respType := WorkloadNetworkPortMirroringResponse{WorkloadNetworkPortMirroring: &WorkloadNetworkPortMirroring{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return WorkloadNetworkPortMirroringResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WorkloadNetworkSegmentPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworkSegmentPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WorkloadNetworkSegmentResponse will be returned.
	FinalResponse(ctx context.Context) (WorkloadNetworkSegmentResponse, error)
}

type workloadNetworkSegmentPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *workloadNetworkSegmentPoller) Done() bool {
	return p.pt.Done()
}

func (p *workloadNetworkSegmentPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *workloadNetworkSegmentPoller) FinalResponse(ctx context.Context) (WorkloadNetworkSegmentResponse, error) {
	respType := WorkloadNetworkSegmentResponse{WorkloadNetworkSegment: &WorkloadNetworkSegment{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.WorkloadNetworkSegment)
	if err != nil {
		return WorkloadNetworkSegmentResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *workloadNetworkSegmentPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *workloadNetworkSegmentPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (WorkloadNetworkSegmentResponse, error) {
	respType := WorkloadNetworkSegmentResponse{WorkloadNetworkSegment: &WorkloadNetworkSegment{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.WorkloadNetworkSegment)
	if err != nil {
		return WorkloadNetworkSegmentResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WorkloadNetworkVMGroupPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworkVMGroupPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WorkloadNetworkVMGroupResponse will be returned.
	FinalResponse(ctx context.Context) (WorkloadNetworkVMGroupResponse, error)
}

type workloadNetworkVMGroupPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *workloadNetworkVMGroupPoller) Done() bool {
	return p.pt.Done()
}

func (p *workloadNetworkVMGroupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *workloadNetworkVMGroupPoller) FinalResponse(ctx context.Context) (WorkloadNetworkVMGroupResponse, error) {
	respType := WorkloadNetworkVMGroupResponse{WorkloadNetworkVMGroup: &WorkloadNetworkVMGroup{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.WorkloadNetworkVMGroup)
	if err != nil {
		return WorkloadNetworkVMGroupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *workloadNetworkVMGroupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *workloadNetworkVMGroupPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (WorkloadNetworkVMGroupResponse, error) {
	respType := WorkloadNetworkVMGroupResponse{WorkloadNetworkVMGroup: &WorkloadNetworkVMGroup{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.WorkloadNetworkVMGroup)
	if err != nil {
		return WorkloadNetworkVMGroupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
