// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

// Number of active connections is not in allowed range.
type ActiveConnectionsNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type ActiveConnectionsNotInAllowedRange.
func (a ActiveConnectionsNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := a.TimeWindowCustomAlertRule.marshalInternal("ActiveConnectionsNotInAllowedRange")
	return json.Marshal(objectMap)
}

// AllowlistCustomAlertRuleClassification provides polymorphic access to related types.
// Call the interface's GetAllowlistCustomAlertRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AllowlistCustomAlertRule, *ConnectionFromIpNotAllowed, *ConnectionToIpNotAllowed, *LocalUserNotAllowed, *ProcessNotAllowed
type AllowlistCustomAlertRuleClassification interface {
	ListCustomAlertRuleClassification
	// GetAllowlistCustomAlertRule() returns the AllowlistCustomAlertRule content of the underlying type.
	GetAllowlistCustomAlertRule() *AllowlistCustomAlertRule
}

// A custom alert rule that checks if a value (depends on the custom alert type) is allowed.
type AllowlistCustomAlertRule struct {
	ListCustomAlertRule
	// The values to allow. The format of the values depends on the rule type.
	AllowlistValues *[]*string `json:"allowlistValues,omitempty"`
}

// GetAllowlistCustomAlertRule implements the AllowlistCustomAlertRuleClassification interface for type AllowlistCustomAlertRule.
func (a *AllowlistCustomAlertRule) GetAllowlistCustomAlertRule() *AllowlistCustomAlertRule { return a }

// MarshalJSON implements the json.Marshaller interface for type AllowlistCustomAlertRule.
func (a AllowlistCustomAlertRule) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal("AllowlistCustomAlertRule")
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AllowlistCustomAlertRule.
func (a *AllowlistCustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AllowlistCustomAlertRule) marshalInternal(discValue string) map[string]interface{} {
	objectMap := a.ListCustomAlertRule.marshalInternal(discValue)
	populate(objectMap, "allowlistValues", a.AllowlistValues)
	return objectMap
}

func (a *AllowlistCustomAlertRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "allowlistValues":
			err = unpopulate(val, &a.AllowlistValues)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.ListCustomAlertRule.unmarshalInternal(rawMsg)
}

// Number of cloud to device messages (AMQP protocol) is not in allowed range.
type AmqpC2DMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type AmqpC2DMessagesNotInAllowedRange.
func (a AmqpC2DMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := a.TimeWindowCustomAlertRule.marshalInternal("AmqpC2DMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of rejected cloud to device messages (AMQP protocol) is not in allowed range.
type AmqpC2DRejectedMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type AmqpC2DRejectedMessagesNotInAllowedRange.
func (a AmqpC2DRejectedMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := a.TimeWindowCustomAlertRule.marshalInternal("AmqpC2DRejectedMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of device to cloud messages (AMQP protocol) is not in allowed range.
type AmqpD2CMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type AmqpD2CMessagesNotInAllowedRange.
func (a AmqpD2CMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := a.TimeWindowCustomAlertRule.marshalInternal("AmqpD2CMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
// format.).
type CloudError struct {
	// The error object.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
func (e CloudError) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += "InnerError: \n"
		if e.InnerError.Code != nil {
			msg += fmt.Sprintf("\tCode: %v\n", *e.InnerError.Code)
		}
		if e.InnerError.Message != nil {
			msg += fmt.Sprintf("\tMessage: %v\n", *e.InnerError.Message)
		}
		if e.InnerError.Target != nil {
			msg += fmt.Sprintf("\tTarget: %v\n", *e.InnerError.Target)
		}
		if e.InnerError.Details != nil {
			msg += fmt.Sprintf("\tDetails: %v\n", *e.InnerError.Details)
		}
		if e.InnerError.AdditionalInfo != nil {
			msg += fmt.Sprintf("\tAdditionalInfo: %v\n", *e.InnerError.AdditionalInfo)
		}
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// The error detail.
type CloudErrorBody struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo *[]*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details *[]*CloudErrorBody `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// Inbound connection from an ip that isn't allowed. Allow list consists of ipv4 or ipv6 range in CIDR notation.
type ConnectionFromIPNotAllowed struct {
	AllowlistCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionFromIPNotAllowed.
func (c ConnectionFromIPNotAllowed) MarshalJSON() ([]byte, error) {
	objectMap := c.AllowlistCustomAlertRule.marshalInternal("ConnectionFromIpNotAllowed")
	return json.Marshal(objectMap)
}

// Outbound connection to an ip that isn't allowed. Allow list consists of ipv4 or ipv6 range in CIDR notation.
type ConnectionToIPNotAllowed struct {
	AllowlistCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionToIPNotAllowed.
func (c ConnectionToIPNotAllowed) MarshalJSON() ([]byte, error) {
	objectMap := c.AllowlistCustomAlertRule.marshalInternal("ConnectionToIpNotAllowed")
	return json.Marshal(objectMap)
}

// CustomAlertRuleClassification provides polymorphic access to related types.
// Call the interface's GetCustomAlertRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *CustomAlertRule, *ActiveConnectionsNotInAllowedRange, *AllowlistCustomAlertRule, *AmqpC2DMessagesNotInAllowedRange,
// - *AmqpC2DRejectedMessagesNotInAllowedRange, *AmqpD2CMessagesNotInAllowedRange, *ConnectionFromIpNotAllowed, *ConnectionToIpNotAllowed,
// - *DenylistCustomAlertRule, *DirectMethodInvokesNotInAllowedRange, *FailedLocalLoginsNotInAllowedRange, *FileUploadsNotInAllowedRange,
// - *HttpC2DMessagesNotInAllowedRange, *HttpC2DRejectedMessagesNotInAllowedRange, *HttpD2CMessagesNotInAllowedRange, *ListCustomAlertRule,
// - *LocalUserNotAllowed, *MqttC2DMessagesNotInAllowedRange, *MqttC2DRejectedMessagesNotInAllowedRange, *MqttD2CMessagesNotInAllowedRange,
// - *ProcessNotAllowed, *QueuePurgesNotInAllowedRange, *ThresholdCustomAlertRule, *TimeWindowCustomAlertRule, *TwinUpdatesNotInAllowedRange,
// - *UnauthorizedOperationsNotInAllowedRange
type CustomAlertRuleClassification interface {
	// GetCustomAlertRule() returns the CustomAlertRule content of the underlying type.
	GetCustomAlertRule() *CustomAlertRule
}

// A custom alert rule.
type CustomAlertRule struct {
	// READ-ONLY; The description of the custom alert.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the custom alert.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// Status of the custom alert.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// The type of the custom alert rule.
	RuleType *string `json:"ruleType,omitempty"`
}

// GetCustomAlertRule implements the CustomAlertRuleClassification interface for type CustomAlertRule.
func (c *CustomAlertRule) GetCustomAlertRule() *CustomAlertRule { return c }

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomAlertRule.
func (c *CustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c CustomAlertRule) marshalInternal(discValue string) map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", c.Description)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "isEnabled", c.IsEnabled)
	c.RuleType = &discValue
	objectMap["ruleType"] = c.RuleType
	return objectMap
}

func (c *CustomAlertRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &c.DisplayName)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, &c.IsEnabled)
			delete(rawMsg, key)
		case "ruleType":
			err = unpopulate(val, &c.RuleType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// A custom alert rule that checks if a value (depends on the custom alert type) is denied.
type DenylistCustomAlertRule struct {
	ListCustomAlertRule
	// The values to deny. The format of the values depends on the rule type.
	DenylistValues *[]*string `json:"denylistValues,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DenylistCustomAlertRule.
func (d DenylistCustomAlertRule) MarshalJSON() ([]byte, error) {
	objectMap := d.ListCustomAlertRule.marshalInternal("DenylistCustomAlertRule")
	populate(objectMap, "denylistValues", d.DenylistValues)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DenylistCustomAlertRule.
func (d *DenylistCustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "denylistValues":
			err = unpopulate(val, &d.DenylistValues)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return d.ListCustomAlertRule.unmarshalInternal(rawMsg)
}

// The device security group resource
type DeviceSecurityGroup struct {
	Resource
	// Device Security group data
	Properties *DeviceSecurityGroupProperties `json:"properties,omitempty"`
}

// List of device security groups
type DeviceSecurityGroupList struct {
	// READ-ONLY; The URI to fetch the next page.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// List of device security group objects
	Value *[]*DeviceSecurityGroup `json:"value,omitempty"`
}

// DeviceSecurityGroupListResponse is the response envelope for operations that return a DeviceSecurityGroupList type.
type DeviceSecurityGroupListResponse struct {
	// List of device security groups
	DeviceSecurityGroupList *DeviceSecurityGroupList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// describes properties of a security group.
type DeviceSecurityGroupProperties struct {
	// The allow-list custom alert rules.
	AllowlistRules *[]AllowlistCustomAlertRuleClassification `json:"allowlistRules,omitempty"`

	// The deny-list custom alert rules.
	DenylistRules *[]*DenylistCustomAlertRule `json:"denylistRules,omitempty"`

	// The list of custom alert threshold rules.
	ThresholdRules *[]ThresholdCustomAlertRuleClassification `json:"thresholdRules,omitempty"`

	// The list of custom alert time-window rules.
	TimeWindowRules *[]TimeWindowCustomAlertRuleClassification `json:"timeWindowRules,omitempty"`
}

// DeviceSecurityGroupResponse is the response envelope for operations that return a DeviceSecurityGroup type.
type DeviceSecurityGroupResponse struct {
	// The device security group resource
	DeviceSecurityGroup *DeviceSecurityGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeviceSecurityGroupsCreateOrUpdateOptions contains the optional parameters for the DeviceSecurityGroups.CreateOrUpdate method.
type DeviceSecurityGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeviceSecurityGroupsDeleteOptions contains the optional parameters for the DeviceSecurityGroups.Delete method.
type DeviceSecurityGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DeviceSecurityGroupsGetOptions contains the optional parameters for the DeviceSecurityGroups.Get method.
type DeviceSecurityGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// DeviceSecurityGroupsListOptions contains the optional parameters for the DeviceSecurityGroups.List method.
type DeviceSecurityGroupsListOptions struct {
	// placeholder for future optional parameters
}

// Number of direct method invokes is not in allowed range.
type DirectMethodInvokesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type DirectMethodInvokesNotInAllowedRange.
func (d DirectMethodInvokesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := d.TimeWindowCustomAlertRule.marshalInternal("DirectMethodInvokesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Number of failed local logins is not in allowed range.
type FailedLocalLoginsNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type FailedLocalLoginsNotInAllowedRange.
func (f FailedLocalLoginsNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := f.TimeWindowCustomAlertRule.marshalInternal("FailedLocalLoginsNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of file uploads is not in allowed range.
type FileUploadsNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type FileUploadsNotInAllowedRange.
func (f FileUploadsNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := f.TimeWindowCustomAlertRule.marshalInternal("FileUploadsNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of cloud to device messages (HTTP protocol) is not in allowed range.
type HTTPC2DMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type HTTPC2DMessagesNotInAllowedRange.
func (h HTTPC2DMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := h.TimeWindowCustomAlertRule.marshalInternal("HttpC2DMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of rejected cloud to device messages (HTTP protocol) is not in allowed range.
type HTTPC2DRejectedMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type HTTPC2DRejectedMessagesNotInAllowedRange.
func (h HTTPC2DRejectedMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := h.TimeWindowCustomAlertRule.marshalInternal("HttpC2DRejectedMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of device to cloud messages (HTTP protocol) is not in allowed range.
type HTTPD2CMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type HTTPD2CMessagesNotInAllowedRange.
func (h HTTPD2CMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := h.TimeWindowCustomAlertRule.marshalInternal("HttpD2CMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// ListCustomAlertRuleClassification provides polymorphic access to related types.
// Call the interface's GetListCustomAlertRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ListCustomAlertRule, *AllowlistCustomAlertRule, *ConnectionFromIpNotAllowed, *ConnectionToIpNotAllowed, *DenylistCustomAlertRule,
// - *LocalUserNotAllowed, *ProcessNotAllowed
type ListCustomAlertRuleClassification interface {
	CustomAlertRuleClassification
	// GetListCustomAlertRule() returns the ListCustomAlertRule content of the underlying type.
	GetListCustomAlertRule() *ListCustomAlertRule
}

// A List custom alert rule.
type ListCustomAlertRule struct {
	CustomAlertRule
	// READ-ONLY; The value type of the items in the list.
	ValueType *ValueType `json:"valueType,omitempty" azure:"ro"`
}

// GetListCustomAlertRule implements the ListCustomAlertRuleClassification interface for type ListCustomAlertRule.
func (l *ListCustomAlertRule) GetListCustomAlertRule() *ListCustomAlertRule { return l }

// UnmarshalJSON implements the json.Unmarshaller interface for type ListCustomAlertRule.
func (l *ListCustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return l.unmarshalInternal(rawMsg)
}

func (l ListCustomAlertRule) marshalInternal(discValue string) map[string]interface{} {
	objectMap := l.CustomAlertRule.marshalInternal(discValue)
	populate(objectMap, "valueType", l.ValueType)
	return objectMap
}

func (l *ListCustomAlertRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "valueType":
			err = unpopulate(val, &l.ValueType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return l.CustomAlertRule.unmarshalInternal(rawMsg)
}

// Login by a local user that isn't allowed. Allow list consists of login names to allow.
type LocalUserNotAllowed struct {
	AllowlistCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type LocalUserNotAllowed.
func (l LocalUserNotAllowed) MarshalJSON() ([]byte, error) {
	objectMap := l.AllowlistCustomAlertRule.marshalInternal("LocalUserNotAllowed")
	return json.Marshal(objectMap)
}

// Number of cloud to device messages (MQTT protocol) is not in allowed range.
type MqttC2DMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type MqttC2DMessagesNotInAllowedRange.
func (m MqttC2DMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := m.TimeWindowCustomAlertRule.marshalInternal("MqttC2DMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of rejected cloud to device messages (MQTT protocol) is not in allowed range.
type MqttC2DRejectedMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type MqttC2DRejectedMessagesNotInAllowedRange.
func (m MqttC2DRejectedMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := m.TimeWindowCustomAlertRule.marshalInternal("MqttC2DRejectedMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of device to cloud messages (MQTT protocol) is not in allowed range.
type MqttD2CMessagesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type MqttD2CMessagesNotInAllowedRange.
func (m MqttD2CMessagesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := m.TimeWindowCustomAlertRule.marshalInternal("MqttD2CMessagesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Execution of a process that isn't allowed. Allow list consists of process names to allow.
type ProcessNotAllowed struct {
	AllowlistCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type ProcessNotAllowed.
func (p ProcessNotAllowed) MarshalJSON() ([]byte, error) {
	objectMap := p.AllowlistCustomAlertRule.marshalInternal("ProcessNotAllowed")
	return json.Marshal(objectMap)
}

// Number of device queue purges is not in allowed range.
type QueuePurgesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type QueuePurgesNotInAllowedRange.
func (q QueuePurgesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := q.TimeWindowCustomAlertRule.marshalInternal("QueuePurgesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Describes an Azure resource.
type Resource struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ThresholdCustomAlertRuleClassification provides polymorphic access to related types.
// Call the interface's GetThresholdCustomAlertRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ThresholdCustomAlertRule, *ActiveConnectionsNotInAllowedRange, *AmqpC2DMessagesNotInAllowedRange, *AmqpC2DRejectedMessagesNotInAllowedRange,
// - *AmqpD2CMessagesNotInAllowedRange, *DirectMethodInvokesNotInAllowedRange, *FailedLocalLoginsNotInAllowedRange, *FileUploadsNotInAllowedRange,
// - *HttpC2DMessagesNotInAllowedRange, *HttpC2DRejectedMessagesNotInAllowedRange, *HttpD2CMessagesNotInAllowedRange, *MqttC2DMessagesNotInAllowedRange,
// - *MqttC2DRejectedMessagesNotInAllowedRange, *MqttD2CMessagesNotInAllowedRange, *QueuePurgesNotInAllowedRange, *TimeWindowCustomAlertRule,
// - *TwinUpdatesNotInAllowedRange, *UnauthorizedOperationsNotInAllowedRange
type ThresholdCustomAlertRuleClassification interface {
	CustomAlertRuleClassification
	// GetThresholdCustomAlertRule() returns the ThresholdCustomAlertRule content of the underlying type.
	GetThresholdCustomAlertRule() *ThresholdCustomAlertRule
}

// A custom alert rule that checks if a value (depends on the custom alert type) is within the given range.
type ThresholdCustomAlertRule struct {
	CustomAlertRule
	// The maximum threshold.
	MaxThreshold *int32 `json:"maxThreshold,omitempty"`

	// The minimum threshold.
	MinThreshold *int32 `json:"minThreshold,omitempty"`
}

// GetThresholdCustomAlertRule implements the ThresholdCustomAlertRuleClassification interface for type ThresholdCustomAlertRule.
func (t *ThresholdCustomAlertRule) GetThresholdCustomAlertRule() *ThresholdCustomAlertRule { return t }

// UnmarshalJSON implements the json.Unmarshaller interface for type ThresholdCustomAlertRule.
func (t *ThresholdCustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t ThresholdCustomAlertRule) marshalInternal(discValue string) map[string]interface{} {
	objectMap := t.CustomAlertRule.marshalInternal(discValue)
	populate(objectMap, "maxThreshold", t.MaxThreshold)
	populate(objectMap, "minThreshold", t.MinThreshold)
	return objectMap
}

func (t *ThresholdCustomAlertRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "maxThreshold":
			err = unpopulate(val, &t.MaxThreshold)
			delete(rawMsg, key)
		case "minThreshold":
			err = unpopulate(val, &t.MinThreshold)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return t.CustomAlertRule.unmarshalInternal(rawMsg)
}

// TimeWindowCustomAlertRuleClassification provides polymorphic access to related types.
// Call the interface's GetTimeWindowCustomAlertRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *TimeWindowCustomAlertRule, *ActiveConnectionsNotInAllowedRange, *AmqpC2DMessagesNotInAllowedRange, *AmqpC2DRejectedMessagesNotInAllowedRange,
// - *AmqpD2CMessagesNotInAllowedRange, *DirectMethodInvokesNotInAllowedRange, *FailedLocalLoginsNotInAllowedRange, *FileUploadsNotInAllowedRange,
// - *HttpC2DMessagesNotInAllowedRange, *HttpC2DRejectedMessagesNotInAllowedRange, *HttpD2CMessagesNotInAllowedRange, *MqttC2DMessagesNotInAllowedRange,
// - *MqttC2DRejectedMessagesNotInAllowedRange, *MqttD2CMessagesNotInAllowedRange, *QueuePurgesNotInAllowedRange, *TwinUpdatesNotInAllowedRange,
// - *UnauthorizedOperationsNotInAllowedRange
type TimeWindowCustomAlertRuleClassification interface {
	ThresholdCustomAlertRuleClassification
	// GetTimeWindowCustomAlertRule() returns the TimeWindowCustomAlertRule content of the underlying type.
	GetTimeWindowCustomAlertRule() *TimeWindowCustomAlertRule
}

// A custom alert rule that checks if the number of activities (depends on the custom alert type) in a time window is within the given range.
type TimeWindowCustomAlertRule struct {
	ThresholdCustomAlertRule
	// The time window size in iso8601 format.
	TimeWindowSize *string `json:"timeWindowSize,omitempty"`
}

// GetTimeWindowCustomAlertRule implements the TimeWindowCustomAlertRuleClassification interface for type TimeWindowCustomAlertRule.
func (t *TimeWindowCustomAlertRule) GetTimeWindowCustomAlertRule() *TimeWindowCustomAlertRule {
	return t
}

// MarshalJSON implements the json.Marshaller interface for type TimeWindowCustomAlertRule.
func (t TimeWindowCustomAlertRule) MarshalJSON() ([]byte, error) {
	objectMap := t.marshalInternal("TimeWindowCustomAlertRule")
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TimeWindowCustomAlertRule.
func (t *TimeWindowCustomAlertRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TimeWindowCustomAlertRule) marshalInternal(discValue string) map[string]interface{} {
	objectMap := t.ThresholdCustomAlertRule.marshalInternal(discValue)
	populate(objectMap, "timeWindowSize", t.TimeWindowSize)
	return objectMap
}

func (t *TimeWindowCustomAlertRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "timeWindowSize":
			err = unpopulate(val, &t.TimeWindowSize)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return t.ThresholdCustomAlertRule.unmarshalInternal(rawMsg)
}

// Number of twin updates is not in allowed range.
type TwinUpdatesNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type TwinUpdatesNotInAllowedRange.
func (t TwinUpdatesNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := t.TimeWindowCustomAlertRule.marshalInternal("TwinUpdatesNotInAllowedRange")
	return json.Marshal(objectMap)
}

// Number of unauthorized operations is not in allowed range.
type UnauthorizedOperationsNotInAllowedRange struct {
	TimeWindowCustomAlertRule
}

// MarshalJSON implements the json.Marshaller interface for type UnauthorizedOperationsNotInAllowedRange.
func (u UnauthorizedOperationsNotInAllowedRange) MarshalJSON() ([]byte, error) {
	objectMap := u.TimeWindowCustomAlertRule.marshalInternal("UnauthorizedOperationsNotInAllowedRange")
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data *json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(*data, v)
}
